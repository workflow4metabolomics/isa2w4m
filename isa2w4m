#!/usr/bin/env Rscript
# vi: ft=r fdm=marker

library(getopt)
suppressPackageStartupMessages(library(Risa))

# Constants {{{1
################################################################

ARGS <- commandArgs(trailingOnly = F)
SCRIPT.PATH <- sub("--file=", "", ARGS[grep("--file=", ARGS)])
PROG.NAME <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)

# Default values
DFT.OUTPUT.DIR <- '.'
DFT.SAMPLE.FILE <- '%s-%a-sample-metadata.tsv'
DFT.VARIABLE.FILE <- '%s-%a-variable-metadata.tsv'
DFT.MATRIX.FILE <- '%s-%a-sample-variable-matrix.tsv'

# Print help {{{1
################################################################

print.help <- function(spec) {
	cat(getopt(spec, usage = TRUE, command = PROG.NAME))
	q(status = 0)
}

# Arg error {{{1
################################################################

arg.error <- function(msg) {
	stop(paste(msg, "Use -h option to get help."))
}

# Read args {{{1
################################################################

read.args <- function() {
	
	s1 <- 'You can use it as a template, where %s will be replaced by the study name and %a by the assay filename.'

	# options
	spec <- c(
		'all-assays',       'a',            0,  'logical',      'Extract all assays.',
		'output-directory', 'd',            1,  'character',    paste('Set output directory. Default is "', DFT.OUTPUT.DIR, '".', sep = ''),
		'help',             'h',            0,  'logical',      'Print this help.',
		'input',            'i',            1,  'character',    'Input directory containing the ISA-Tab files.',
		'study-name',       'n',            1,  'character',    'Name of the study to extract. If unset, the first study found will be used.',
		'assay-filename',   'f',            1,  'character',    'Filename of the assay to extract. If unset, the first assay of the chosen study will be used.',
		'sample-output',    's',            1,  'character',    paste('Output file for sample metadata. ', s1, ' Default is "', DFT.SAMPLE.FILE, '".', sep = ''),
		'variable-output',  'v',            1,  'character',    paste('Output file for variable metadata. ', s1, ' Default is "', DFT.VARIABLE.FILE,'".', sep = ''),
		'matrix-output',    'm',            1,  'character',    paste('Output file for sample x variable matrix. ', s1, ' Default is "', DFT.MATRIX.FILE, '".', sep = ''),
		'samp-na-filering', 'S',            1,  'character',    'Filter out NA values in the specified sample metadata columns. The value is comma separated list of column names.',
		'var-na-filering',  'V',            1,  'character',    'Filter out NA values in the specified variable metadata columns. The value is comma separated list of column names.'
		)
	opt <- getopt(matrix(spec, byrow = TRUE, ncol = 5))

	# Help
	if ( ! is.null(opt$help))
		print.help(matrix(spec, byrow = TRUE, ncol = 5))

	# Parse values
	if ( ! is.null(opt[['samp-na-filering']]))
		opt[['samp-na-filering']] <- strsplit(opt[['samp-na-filering']], ',')[[1]]
	if ( ! is.null(opt[['var-na-filering']]))
		opt[['var-na-filering']] <- strsplit(opt[['var-na-filering']], ',')[[1]]

	# Check values
	if (is.null(opt$input))
		arg.error('You must set an input directory through -i option.')
	if ( ! file.exists(opt$input))
		arg.error(paste("Directory \"", opt$input, "\" doesn't exist.", sep = ''))

	# Set default path for unset outputs
	if (is.null(opt[['output-directory']])) opt[['output-directory']] <- DFT.OUTPUT.DIR
	if (is.null(opt[['sample-output']])) opt[['sample-output']] <- DFT.SAMPLE.FILE
	if (is.null(opt[['variable-output']])) opt[['variable-output']] <- DFT.VARIABLE.FILE
	if (is.null(opt[['matrix-output']])) opt[['matrix-output']] <- DFT.MATRIX.FILE

	return(opt)
}

# Get study {{{1
################################################################

get.study <- function(opt, isa) {

	if ('study-name' %in% names(opt)) {
		if ( ! opt[['study-name']] %in% isa@study.filenames)
			stop(paste("Cannot find study \"", opt[['study-name']], "\".", sep = ''))
		study.name <- isa@study.identifiers[[which(opt[['study-name']] == isa@study.filenames)]]
	} else { # Take the first study
		cat("No study name set, choose first study.\n")
		study.name <- isa@study.identifiers[[1]]
	}
	if (length(study.name) != 1)
		stop("No study found.")
	cat(paste("Study \"", study.name, "\" has been selected.\n", sep = ""))

	study.df <- isa@study.files[[study.name]]

	return(list(name = study.name, df = study.df))
}

# Get number of assays {{{1
################################################################

get.nb.assays <- function(isa, study.name) {
	study.assays <- isa@assay.files.per.study[[study.name]]
	return(length(study.assays))
}

# Get chosen assay index {{{1
################################################################

get.chosen.assay.index <- function(opt, isa, study.name) {

	study.assays <- isa@assay.files.per.study[[study.name]]
	if (length(study.assays) == 0)
		stop(paste("No assay in study ", study.name, ".", sep = ''))
	if ('assay-filename' %in% names(opt)) {
		assay.index <- which(opt[['assay-filename']] == isa@assay.filenames)
		if (length(assay.index) == 0)
			stop(paste("Found no assay file \"", opt[['assay-filename']], "\" in study \"", study.name, "\".", sep = ''))
		if (length(assay.index) > 1)
			stop(paste("Found more than one assay file named \"", opt[['assay-filename']], "\" in study \"", study.name, "\".", sep = ''))
	} else
		assay.index <- 1

	return(assay.index)
}

# Get assay {{{1
################################################################

get.assay <- function(isa, study.name, assay.index) {

	study.assays <- isa@assay.files.per.study[[study.name]]
	study.assay.df <- study.assays[[assay.index]]
	study.assay.filename <- isa@assay.filenames[[assay.index]]
	cat(paste("Assay file ", assay.index, " \"", study.assay.filename, "\" has been selected.\n", sep = ''))

	return(list(filename = study.assay.filename, df = study.assay.df))
}

# Make sample metadata {{{1
################################################################

make.sample.metadata <- function(study, assay, sample.names, normalize = TRUE) {

	# Create sample metadata by merging assay and study metadata
	colnames(study$df) <- make.names(colnames(study$df), uniq = TRUE)
	colnames(assay$df) <- make.names(colnames(assay$df), uniq = TRUE)
	sample.metadata <- merge(assay$df, study$df, by = "Sample.Name", sort = FALSE)

	# Normalize
	if (normalize) {
		sample.metadata <- cbind(data.frame(sample.name = make.names(sample.names, uniq = TRUE)), sample.metadata)
		colnames(sample.metadata) <- make.names(colnames(sample.metadata), uniq = TRUE)
	}

	return(sample.metadata)
}

# Get measures {{{1
################################################################

get.measures <- function(opt, assay) {

	# Check presence of MAF files
	maf.field <- "Metabolite Assignment File"
	if ( ! maf.field %in% colnames(assay$df))
		return(NULL)

	# Get data file
	m_file <- assay$df[[maf.field]]
	m_file <- m_file[ ! duplicated(m_file)]
	if (length(m_file) != 1)
		stop(paste("More than one metabolite assignement file found in assay \"", assay$filename, "\": ", paste(m_file, collapse = ", "), ".", sep = ''))
	cat(paste("Data file \"", m_file, "\" has been selected.\n", sep = ''))
	m.df <- read.table(file = file.path(opt$input, m_file), sep = "\t", header = TRUE, check.names = FALSE)

	return(list(df = m.df, file = m_file))
}

# Get sample names {{{1
################################################################

get.sample.names <- function (assay, measures) {

	sample.names <- NULL
	sample.names.field <- NULL
	for (sample.field in colnames(assay$df)) {
		if (all(assay$df[[sample.field]] %in% colnames(measures$df)) && all(! duplicated(assay$df[[sample.field]]))) {
			sample.names.field <- sample.field
			break
		}
	}
	if (is.null(sample.names.field))
		stop(paste("Impossible to find a column for sample names. Either such a column does not exist, or it contains duplicates.", sep = ''))
	cat(paste("Column \"", sample.names.field, "\" has been selected for sample names to match with column names of data file \"", measures$file, "\".\n", sep = ''))
	sample.names <- assay$df[[sample.names.field]]

	return(sample.names)
}

# Make variable metadata {{{1
################################################################

make.variable.metadata <- function(measures, sample.names, variable.names, normalize = TRUE) {

	variable.metadata <- measures$df[ ! colnames(measures$df) %in% sample.names]

	# Add variable names as columns
	variable.metadata <- cbind(data.frame(variable.name = variable.names), variable.metadata)

	# Normalize
	if (normalize)
		colnames(variable.metadata) <- make.names(colnames(variable.metadata), uniq = TRUE)

	return(variable.metadata)
}

# Make matrix {{{1
################################################################

make.matrix <- function(measures, sample.names, variable.names, normalize = TRUE) {

	if (any( ! sample.names %in% colnames(measures$df)))
		stop(paste("Cannot find sample names in column names of \"", measures$file, "\".", sep = ''))
	sample.variable.matrix <- measures$df[sample.names]

	# Add variable names as columns
	sample.variable.matrix <- cbind(data.frame(variable.name = variable.names), sample.variable.matrix)

	# Normalize sample names
	if (normalize)
		colnames(sample.variable.matrix) <- c('variable.name', make.names(sample.names, uniq = TRUE))

	return(sample.variable.matrix)
}

# Make variable names {{{1
################################################################

make.variable.names <- function(measures) {

	variable.names <- character(nrow(measures$df))
	for (f in c('mass_to_charge', 'retention_time'))
		if (f %in% colnames(measures$df)) {
			col.vals <- as.character(measures$df[[f]])
			col.vals <- ifelse(is.na(col.vals), '', col.vals)
			variable.names <- paste(variable.names, ifelse(nchar(variable.names) > 0 & nchar(col.vals) > 0, '_', ''), col.vals, sep = '')
		}
	variable.names <- make.names(variable.names, uniq = TRUE)

	return(variable.names)
}

# Main {{{1
################################################################

# Set error function
options(error = function() { traceback(2) ; quit(status = 1) }, warn = 2 )

# Read command line arguments
opt <- read.args()

# Read ISA-Tab files
# Suppress message: "No 'Factor Value' column defined in study file s_sacurine.txt. Factors slot will be an empty list for that study.
isa <- suppressMessages(Risa::readISAtab(opt$input))

# Get study
study <- get.study(opt, isa)

# Loop on assay indices to extract
for (assay.index in (if (is.null(opt[['all-assays']])) get.chosen.assay.index(opt, isa, study$name) else seq(get.nb.assays(isa, study$name)))) {

	# Get assay
	assay <- get.assay(isa, study$name, assay.index)

	# Get measures
	measures <- get.measures(opt, assay)
	if (is.null(measures)) {
		cat("No MAF file found for assay ", assay$filename, ". Output will be empty.\n", sep = '', file = stderr())
		next
	}

	# Create variable names
	variable.names <- make.variable.names(measures)

	# Get sample names
	sample.names <- get.sample.names(assay, measures)

	# Extract sample metadata
	sample.metadata <- make.sample.metadata(study, assay, sample.names = sample.names, normalize = TRUE)

	# Extract variable metadata
	variable.metadata <- make.variable.metadata(measures = measures, sample.names = sample.names, variable.names = variable.names, normalize = TRUE)

	# Extract matrix
	sample.variable.matrix <- make.matrix(measures = measures, sample.names = sample.names, variable.names = variable.names, normalize = TRUE)

	# Filter out NA values
	if ( ! is.null(opt[['samp-na-filering']])) {
		opt[['samp-na-filering']] <- make.names(opt[['samp-na-filering']])
		cols.to.filter <- colnames(sample.metadata) %in% opt[['samp-na-filering']]
		good.rows <- complete.cases(sample.metadata[, cols.to.filter, drop = FALSE])
		sample.variable.matrix <- sample.variable.matrix[, c(TRUE, good.rows), drop = FALSE]
		sample.metadata <- sample.metadata[good.rows, , drop = FALSE]
	}
	if ( ! is.null(opt[['var-na-filering']])) {
		opt[['var-na-filering']] <- make.names(opt[['var-na-filering']])
		cols.to.filter <- colnames(variable.metadata) %in% opt[['var-na-filering']]
		good.rows <- complete.cases(variable.metadata[, cols.to.filter, drop = FALSE])
		sample.variable.matrix <- sample.variable.matrix[good.rows, , drop = FALSE]
		variable.metadata <- variable.metadata[good.rows, , drop = FALSE]
	}

	# Write output
	if ( ! file.exists(opt[['output-directory']]))
		dir.create(opt[['output-directory']])
	output.dfs <- list(sample.metadata = sample.metadata, variable.metadata = variable.metadata, sample.variable.matrix = sample.variable.matrix)
	output.files <- list(sample.metadata = opt[['sample-output']], variable.metadata = opt[['variable-output']], sample.variable.matrix = opt[['matrix-output']])
	for (o in c('sample.metadata', 'variable.metadata', 'sample.variable.matrix')) {
		output.files[[o]] <- sub('%s', study$name, output.files[[o]])
		output.files[[o]] <- sub('%a', assay$filename, output.files[[o]])
		filepath = if (R.utils::isAbsolutePath(output.files[[o]])) output.files[[o]] else file.path(opt[['output-directory']], output.files[[o]])
		write.table(output.dfs[[o]], file = filepath, sep = "\t", row.names = FALSE)
	}
}
